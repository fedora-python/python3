diff --git a/Doc/howto/index.rst b/Doc/howto/index.rst
index 2c9d699..3bef0cf 100644
--- a/Doc/howto/index.rst
+++ b/Doc/howto/index.rst
@@ -29,4 +29,5 @@ Currently, the HOWTOs are:
    argparse.rst
    ipaddress.rst
    clinic.rst
+   instrumentation.rst
 
diff --git a/Makefile.pre.in b/Makefile.pre.in
index 04e4704..714586a 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -404,6 +404,7 @@ PYTHON_OBJS=	\
 		Python/formatter_unicode.o \
 		Python/fileutils.o \
 		Python/$(DYNLOADFILE) \
+		@SYSTEMTAPOBJS@ \
 		$(LIBOBJS) \
 		$(MACHDEP_OBJS) \
 		$(THREADOBJ)
@@ -837,7 +838,8 @@ Objects/setobject.o: $(srcdir)/Objects/stringlib/eq.h
 $(OPCODETARGETS_H): $(OPCODETARGETGEN_FILES)
 	$(OPCODETARGETGEN) $(OPCODETARGETS_H)
 
-Python/ceval.o: $(OPCODETARGETS_H) $(srcdir)/Python/ceval_gil.h
+Python/ceval.o: $(OPCODETARGETS_H) $(srcdir)/Python/ceval_gil.h \
+			$(srcdir)/Python/ceval_systemtap.h @SYSTEMTAPDEPS@
 
 Python/frozen.o: Python/importlib.h
 
@@ -845,6 +847,13 @@ Objects/typeobject.o: Objects/typeslots.inc
 Objects/typeslots.inc: $(srcdir)/Include/typeslots.h $(srcdir)/Objects/typeslots.py
 	$(PYTHON) $(srcdir)/Objects/typeslots.py < $(srcdir)/Include/typeslots.h > Objects/typeslots.inc
 
+# Only needed with --with-systemtap; not a public header:
+$(srcdir)/Python/pysystemtap.h: $(srcdir)/Python/pysystemtap.d
+	dtrace -o $@ $(DFLAGS) -C -h -s $(srcdir)/Python/pysystemtap.d
+
+Python/pysystemtap.o: $(srcdir)/Python/pysystemtap.d Python/ceval.o
+	dtrace -o $@ $(DFLAGS) -C -G -s $(srcdir)/Python/pysystemtap.d Python/ceval.o
+
 ############################################################################
 # Header files
 
@@ -1542,6 +1551,7 @@ clean: pycremoval
 	-rm -f pybuilddir.txt
 	-rm -f Lib/lib2to3/*Grammar*.pickle
 	-rm -f Programs/_testembed Programs/_freeze_importlib
+	-rm -f $(srcdir)/Python/pysystemtap.h
 
 profile-removal:
 	find . -name '*.gc??' -exec rm -f {} ';'
diff --git a/Python/ceval.c b/Python/ceval.c
index 2dbf591..7037227 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -18,6 +18,8 @@
 
 #include <ctype.h>
 
+#include "ceval_systemtap.h"
+
 #ifndef WITH_TSC
 
 #define READ_TIMESTAMP(var)
@@ -1156,6 +1158,10 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
         }
     }
 
+    if (PYTHON_FUNCTION_ENTRY_ENABLED()) {
+        systemtap_function_entry(f);
+    }
+
     co = f->f_code;
     names = co->co_names;
     consts = co->co_consts;
@@ -3247,6 +3253,11 @@ fast_yield:
 
     /* pop frame */
 exit_eval_frame:
+
+    if (PYTHON_FUNCTION_RETURN_ENABLED()) {
+        systemtap_function_return(f);
+    }
+
     Py_LeaveRecursiveCall();
     f->f_executing = 0;
     tstate->frame = f->f_back;
diff --git a/Python/ceval_systemtap.h b/Python/ceval_systemtap.h
new file mode 100644
index 0000000..38697ad
--- /dev/null
+++ b/Python/ceval_systemtap.h
@@ -0,0 +1,86 @@
+/*
+  Support for SystemTap static markers  
+*/
+
+#ifdef WITH_SYSTEMTAP
+
+#include "pysystemtap.h"
+
+/*
+  A struct to hold all of the information gathered when one of the traceable
+  markers is triggered
+*/
+struct frame_marker_info
+{
+    PyObject *filename_obj;
+    PyObject *funcname_obj;
+    const char *filename;
+    const char *funcname;
+    int lineno;
+};
+
+static void
+get_frame_marker_info(PyFrameObject *f, struct frame_marker_info *fmi)
+{
+    PyObject *ptype;
+    PyObject *pvalue;
+    PyObject *ptraceback;
+
+    PyErr_Fetch(&ptype, &pvalue, &ptraceback);
+
+    fmi->filename_obj = PyUnicode_EncodeFSDefault(f->f_code->co_filename);
+    if (fmi->filename_obj) {
+        fmi->filename = PyBytes_AsString(fmi->filename_obj);
+    } else {
+        fmi->filename = NULL;
+    }
+
+    fmi->funcname_obj = PyUnicode_AsUTF8String(f->f_code->co_name);
+    if (fmi->funcname_obj) {
+        fmi->funcname = PyBytes_AsString(fmi->funcname_obj);
+    } else {
+        fmi->funcname = NULL;
+    }
+
+    fmi->lineno = PyCode_Addr2Line(f->f_code, f->f_lasti);
+
+    PyErr_Restore(ptype, pvalue, ptraceback);
+
+}
+
+static void
+release_frame_marker_info(struct frame_marker_info *fmi)
+{
+    Py_XDECREF(fmi->filename_obj);
+    Py_XDECREF(fmi->funcname_obj);
+}
+
+static void
+systemtap_function_entry(PyFrameObject *f)
+{
+    struct frame_marker_info fmi;
+    get_frame_marker_info(f, &fmi);
+    PYTHON_FUNCTION_ENTRY(fmi.filename, fmi.funcname, fmi.lineno, f);
+    release_frame_marker_info(&fmi);
+}
+
+static void
+systemtap_function_return(PyFrameObject *f)
+{
+    struct frame_marker_info fmi;
+    get_frame_marker_info(f, &fmi);
+    PYTHON_FUNCTION_RETURN(fmi.filename, fmi.funcname, fmi.lineno, f);
+    release_frame_marker_info(&fmi);
+}
+
+#else /* #ifdef WITH_SYSTEMTAP */
+
+/*
+  When configured --without-systemtap, everything compiles away to nothing:
+*/
+#define PYTHON_FUNCTION_ENTRY_ENABLED() 0
+#define PYTHON_FUNCTION_RETURN_ENABLED() 0
+#define systemtap_function_entry(f)
+#define systemtap_function_return(f)
+
+#endif
diff --git a/configure b/configure
index 4247a78..baa459b 100755
--- a/configure
+++ b/configure
@@ -642,6 +642,8 @@ TRUE
 MACHDEP_OBJS
 DYNLOADFILE
 DLINCLDIR
+SYSTEMTAPDEPS
+SYSTEMTAPOBJS
 THREADOBJ
 LDLAST
 USE_THREAD_MODULE
@@ -814,6 +816,7 @@ with_doc_strings
 with_tsc
 with_pymalloc
 with_valgrind
+with_systemtap
 with_fpectl
 with_libm
 with_libc
@@ -1499,6 +1502,7 @@ Optional Packages:
   --with(out)-tsc         enable/disable timestamp counter profile
   --with(out)-pymalloc    disable/enable specialized mallocs
   --with-valgrind         Enable Valgrind support
+  --with(out)-systemtap   disable/enable SystemTap support
   --with-fpectl           enable SIGFPE catching
   --with-libm=STRING      math library
   --with-libc=STRING      C library
@@ -10546,6 +10550,31 @@ fi
     OPT="-DDYNAMIC_ANNOTATIONS_ENABLED=1 $OPT"
 fi
 
+# Check for systemtap support
+# On Linux, /usr/bin/dtrace is in fact a shim to SystemTap
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for --with-systemtap" >&5
+$as_echo_n "checking for --with-systemtap... " >&6; }
+
+# Check whether --with-systemtap was given.
+if test "${with_systemtap+set}" = set; then :
+  withval=$with_systemtap;
+else
+  with_systemtap=no
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $with_systemtap" >&5
+$as_echo "$with_systemtap" >&6; }
+if test "$with_systemtap" != no; then
+
+$as_echo "#define WITH_SYSTEMTAP 1" >>confdefs.h
+
+    SYSTEMTAPOBJS="Python/pysystemtap.o"
+    SYSTEMTAPDEPS="\$(srcdir)/Python/pysystemtap.h"
+fi
+
+
+
+
 # -I${DLINCLDIR} is added to the compile rule for importdl.o
 
 DLINCLDIR=.
diff --git a/configure.ac b/configure.ac
index 05dc0e6..ab5a477 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2940,6 +2940,23 @@ if test "$with_valgrind" != no; then
     OPT="-DDYNAMIC_ANNOTATIONS_ENABLED=1 $OPT"
 fi
 
+# Check for systemtap support
+# On Linux, /usr/bin/dtrace is in fact a shim to SystemTap
+AC_MSG_CHECKING([for --with-systemtap])
+AC_ARG_WITH([systemtap],
+            AC_HELP_STRING([--with(out)-systemtap], [disable/enable SystemTap support]),,
+            with_systemtap=no)
+AC_MSG_RESULT([$with_systemtap])
+if test "$with_systemtap" != no; then
+    AC_DEFINE(WITH_SYSTEMTAP, 1,
+        [Define if you want to compile in SystemTap support])
+    SYSTEMTAPOBJS="Python/pysystemtap.o"
+    SYSTEMTAPDEPS="\$(srcdir)/Python/pysystemtap.h"
+fi
+
+AC_SUBST(SYSTEMTAPOBJS)
+AC_SUBST(SYSTEMTAPDEPS)
+
 # -I${DLINCLDIR} is added to the compile rule for importdl.o
 AC_SUBST(DLINCLDIR)
 DLINCLDIR=.
diff --git a/pyconfig.h.in b/pyconfig.h.in
index e469f6a..c371f5c 100644
--- a/pyconfig.h.in
+++ b/pyconfig.h.in
@@ -1346,6 +1346,9 @@
 /* Define if you want to compile in Python-specific mallocs */
 #undef WITH_PYMALLOC
 
+/* Define if you want to compile in SystemTap support */
+#undef WITH_SYSTEMTAP
+
 /* Define if you want to compile in rudimentary thread support */
 #undef WITH_THREAD
 
